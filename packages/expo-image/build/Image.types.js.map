{"version":3,"file":"Image.types.js","sourceRoot":"","sources":["../src/Image.types.ts"],"names":[],"mappings":"AAkGA;;GAEG;AACH,MAAM,CAAN,IAAY,eA+BX;AA/BD,WAAY,eAAe;IACzB;;;OAGG;IACH,kCAAe,CAAA;IAEf;;;;OAIG;IACH,sCAAmB,CAAA;IAEnB;;;OAGG;IACH,gCAAa,CAAA;IAEb;;;OAGG;IACH,gCAAa,CAAA;IAEb;;;OAGG;IACH,4CAAyB,CAAA;AAC3B,CAAC,EA/BW,eAAe,KAAf,eAAe,QA+B1B;AA4CD;;GAEG;AACH,MAAM,CAAN,IAAY,eA4BX;AA5BD,WAAY,eAAe;IACzB;;;OAGG;IACH,kCAAe,CAAA;IACf;;;OAGG;IACH,sCAAmB,CAAA;IACnB;;;;;OAKG;IACH,sCAAmB,CAAA;IACnB;;;OAGG;IACH,oCAAiB,CAAA;IACjB;;;OAGG;IACH,oCAAiB,CAAA;AACnB,CAAC,EA5BW,eAAe,KAAf,eAAe,QA4B1B;AAQD,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,+EAAe,CAAA;IACf,uEAAW,CAAA;IACX,yEAAY,CAAA;IACZ,qEAAU,CAAA;AACZ,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;AAED,MAAM,CAAN,IAAY,qBASX;AATD,WAAY,qBAAqB;IAC/B,iEAAQ,CAAA;IACR,mFAAiB,CAAA;IACjB,qFAAkB,CAAA;IAClB,uFAAmB,CAAA;IACnB,mFAAiB,CAAA;IACjB,yFAAoB,CAAA;IACpB,uEAAW,CAAA;IACX,2EAAa,CAAA;AACf,CAAC,EATW,qBAAqB,KAArB,qBAAqB,QAShC;AAED,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,+BAAa,CAAA;IACb,+BAAa,CAAA;IACb,mCAAiB,CAAA;AACnB,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB","sourcesContent":["import { AccessibilityProps, ImageStyle as RNImageStyle } from 'react-native';\n\nexport type ImageSource = {\n  /**\n   * A string representing the resource identifier for the image,\n   * which could be an http address, a local file path, or the name of a static image resource.\n   */\n  uri?: string;\n  /**\n   * An object representing the HTTP headers to send along with the request for a remote image.\n   */\n  headers?: { [key: string]: string };\n  /**\n   * Can be specified if known at build time, in which case the value\n   * will be used to set the default `<Image/>` component dimension\n   */\n  width?: number;\n  /**\n   * Can be specified if known at build time, in which case the value\n   * will be used to set the default `<Image/>` component dimension\n   */\n  height?: number;\n};\n\nexport type ImageStyle = RNImageStyle & {\n  resizeMode?: ImageResizeMode;\n  elevation?: number;\n};\n\n// number on native platforms, string or number on web\ntype RequireSource = number | string;\n\nexport type ImageProps = AccessibilityProps & {\n  style?: ImageStyle;\n  /**\n   * The image source (either a remote URL or a local file resource).\n   */\n  source?: ImageSource | RequireSource;\n  /**\n   * A static image to display while loading the image source.\n   * @platform android\n   */\n  defaultSource?: ImageSource | null;\n  /**\n   * Similarly to `source`, this property represents the resource used to render the loading indicator for the image.\n   * The loading indicator is displayed until image is ready to be displayed, typically after the image is downloaded.\n   * @platform android\n   */\n  loadingIndicatorSource?: ImageSource | null;\n\n  /**\n   * Determines how the image should be resized to fit its container.\n   * It mirrors the CSS [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.\n   * @default \"cover\"\n   */\n  contentFit?: ImageContentFit;\n\n  /**\n   * Specifies the alignment of the image within the component's box.\n   * Areas of the box which aren't covered by the image will show the component's background.\n   * It's an equivalent of the CSS [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property.\n   */\n  contentPosition?: ImageContentPosition;\n\n  /**\n   * Determines how to resize the image when the frame doesn't match the raw image dimensions.\n   * @default \"cover\"\n   * @deprecated Deprecated in favor of the more powerful `contentFit` and `contentPosition` props.\n   */\n  resizeMode?: ImageResizeMode;\n  /**\n   * Object that describes how the image view should transition the contents on props change.\n   * @platform ios\n   */\n  transition?: ImageTransition | null;\n  /**\n   * Called when the image starts to load.\n   */\n  onLoadStart?: () => void;\n  /**\n   * Called when the image load completes successfully.\n   */\n  onLoad?: (event: ImageLoadEventData) => void;\n  /**\n   * Called when the image is loading. Can be called multiple times before the image has finished loading.\n   * The event object provides details on how many bytes were loaded so far and what's the expected total size.\n   */\n  onProgress?: (event: ImageProgressEventData) => void;\n  /**\n   * Called on an image fetching error.\n   */\n  onError?: (event: ImageErrorEventData) => void;\n  /**\n   * Called when the image load either succeeds or fails.\n   */\n  onLoadEnd?: () => void;\n};\n\n/**\n * Determines how the image should be resized to fit its container.\n */\nexport enum ImageContentFit {\n  /**\n   * The image is sized to maintain its aspect ratio while filling the element's entire content box.\n   * If the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.\n   */\n  COVER = 'cover',\n\n  /**\n   * The image is scaled to maintain its aspect ratio while fitting within the element's content box.\n   * The entire image is made to fill the box, while preserving its aspect ratio,\n   * so the image will be \"letterboxed\" if its aspect ratio does not match the aspect ratio of the box.\n   */\n  CONTAIN = 'contain',\n\n  /**\n   * The image is sized to fill the element's content box. The entire object will completely fill the box.\n   * If the image's aspect ratio does not match the aspect ratio of its box, then the image will be stretched to fit.\n   */\n  FILL = 'fill',\n\n  /**\n   * The image is not resized and is centered by default.\n   * When specified, the exact position can be controlled with `objectPosition` option.\n   */\n  NONE = 'none',\n\n  /**\n   * The image is sized as if `none` or `contain` were specified,\n   * whichever would result in a smaller concrete object size.\n   */\n  SCALE_DOWN = 'scale-down',\n}\n\n/**\n * @docsMissing\n */\nexport type PositionValue = number | `${number}%` | `${number}` | 'center';\n\n/**\n * @docsMissing\n */\nexport type ImageContentPositionObject =\n  | { top?: PositionValue; right?: PositionValue }\n  | { top?: PositionValue; left?: PositionValue }\n  | { bottom?: PositionValue; right?: PositionValue }\n  | { bottom?: PositionValue; left?: PositionValue };\n\n/**\n * A stringified and shorthand form of the `contentPosition` prop. This specifies the edges to which to align the image content.\n * If only one keyword is provided, the other dimension is then set to 50%, so the image is placed in the middle of the edge specified.\n */\nexport type ImageContentPositionString =\n  | 'center'\n  | 'top'\n  | 'right'\n  | 'bottom'\n  | 'left'\n  | 'top center'\n  | 'top right'\n  | 'top left'\n  | 'right center'\n  | 'right top'\n  | 'right bottom'\n  | 'bottom center'\n  | 'bottom right'\n  | 'bottom left'\n  | 'left center'\n  | 'left top'\n  | 'left bottom';\n\n/**\n * @docsMissing\n */\nexport type ImageContentPosition = ImageContentPositionString | ImageContentPositionObject;\n\n/**\n * @deprecated The resize mode is deprecated in favor of `ImageContentFit` and `contentFit` prop.\n */\nexport enum ImageResizeMode {\n  /**\n   * The image will be resized such that the entire area of the view\n   * is covered by the image, potentially clipping parts of the image.\n   */\n  COVER = 'cover',\n  /**\n   * The image will be resized such that it will be completely\n   * visible, contained within the frame of the view.\n   */\n  CONTAIN = 'contain',\n  /**\n   * The image will be stretched to fill the entire frame of the view without clipping.\n   * This may change the aspect ratio of the image, distorting it.\n   *\n   * @platform ios\n   */\n  STRETCH = 'stretch',\n  /**\n   * The image will be repeated to cover the frame of the view.\n   * The image will keep its size and aspect ratio.\n   */\n  REPEAT = 'repeat',\n  /**\n   * The image will be scaled down such that it is completely visible,\n   * if bigger than the area of the view. The image will not be scaled up.\n   */\n  CENTER = 'center',\n}\n\nexport type ImageTransition = {\n  duration?: number;\n  timing?: ImageTransitionTiming;\n  effect?: ImageTransitionEffect;\n};\n\nexport enum ImageTransitionTiming {\n  EASE_IN_OUT = 1,\n  EASE_IN = 2,\n  EASE_OUT = 3,\n  LINEAR = 4,\n}\n\nexport enum ImageTransitionEffect {\n  NONE = 0,\n  CROSS_DISOLVE = 1,\n  FLIP_FROM_LEFT = 2,\n  FLIP_FROM_RIGHT = 3,\n  FLIP_FROM_TOP = 4,\n  FLIP_FROM_BOTTOM = 5,\n  CURL_UP = 6,\n  CURL_DOWN = 7,\n}\n\nexport enum ImageCacheType {\n  NONE = 'none',\n  DISK = 'disk',\n  MEMORY = 'memory',\n}\n\nexport type ImageLoadEventData = {\n  cacheType: ImageCacheType;\n  source: {\n    url: string;\n    width: number;\n    height: number;\n    mediaType: string | null;\n  };\n};\n\nexport type ImageProgressEventData = {\n  loaded: number;\n  total: number;\n};\n\nexport type ImageErrorEventData = {\n  error: string;\n};\n"]}