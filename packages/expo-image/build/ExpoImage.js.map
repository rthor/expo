{"version":3,"file":"ExpoImage.js","sourceRoot":"","sources":["../src/ExpoImage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { requireNativeViewManager, requireNativeModule } from 'expo-modules-core';\nimport React from 'react';\nimport { Image, NativeSyntheticEvent, StyleSheet, Platform, processColor } from 'react-native';\n\nimport {\n  ImageErrorEventData,\n  ImageLoadEventData,\n  ImageProgressEventData,\n  ImageProps,\n  ImageSource,\n} from './Image.types';\nimport { resolveContentFit, resolveContentPosition } from './utils';\n\nconst NativeExpoImage = requireNativeViewManager('ExpoImage');\n\nconst ExpoImageModule = requireNativeModule('ExpoImage');\n\nfunction withDeprecatedNativeEvent<NativeEvent>(\n  event: NativeSyntheticEvent<NativeEvent>\n): NativeEvent {\n  Object.defineProperty(event.nativeEvent, 'nativeEvent', {\n    get() {\n      console.warn(\n        '[expo-image]: Accessing event payload through \"nativeEvent\" is deprecated, it is now part of the event object itself'\n      );\n      return event;\n    },\n  });\n  return event.nativeEvent;\n}\n\nclass ExpoImage extends React.PureComponent<ImageProps> {\n  onLoadStart = () => {\n    this.props.onLoadStart?.();\n  };\n\n  onLoad = (event: NativeSyntheticEvent<ImageLoadEventData>) => {\n    this.props.onLoad?.(withDeprecatedNativeEvent(event));\n    this.onLoadEnd();\n  };\n\n  onProgress = (event: NativeSyntheticEvent<ImageProgressEventData>) => {\n    this.props.onProgress?.(withDeprecatedNativeEvent(event));\n  };\n\n  onError = (event: NativeSyntheticEvent<ImageErrorEventData>) => {\n    this.props.onError?.(withDeprecatedNativeEvent(event));\n    this.onLoadEnd();\n  };\n\n  onLoadEnd = () => {\n    this.props.onLoadEnd?.();\n  };\n\n  render() {\n    const { source, style, defaultSource, loadingIndicatorSource, ...props } = this.props;\n    const resolvedSource = Image.resolveAssetSource((source as ImageSource | number) ?? {});\n    const resolvedStyle = StyleSheet.flatten([style]);\n    const resolvedPlaceholder = Image.resolveAssetSource(\n      defaultSource ?? loadingIndicatorSource ?? {}\n    );\n    const contentFit = resolveContentFit(props.contentFit, props.resizeMode);\n    const contentPosition = resolveContentPosition(props.contentPosition);\n\n    // If both are specified, we default to use default source\n    if (defaultSource && loadingIndicatorSource) {\n      console.warn(\n        \"<Image> component can't have both defaultSource and loadingIndicatorSource at the same time. Defaulting to defaultSource\"\n      );\n    }\n\n    // When possible, pass through the intrinsic size of the asset to the Yoga layout\n    // system. While this is also possible in native code, doing it here is more efficient\n    // as the yoga node gets initialized with the correct size from the start.\n    // In native code, there is a separation between the layout (shadow) nodes and\n    // actual views. Views that update the intrinsic content-size in Yoga trigger\n    // additional layout passes, which we want to prevent.\n    if (!Array.isArray(resolvedSource)) {\n      const { width, height } = resolvedSource;\n      resolvedStyle.width = resolvedStyle.width ?? width;\n      resolvedStyle.height = resolvedStyle.height ?? height;\n    }\n\n    // Shadows behave different on iOS, Android & Web.\n    // Android uses the `elevation` prop, whereas iOS\n    // and web use the regular `shadow...` props.\n    let hasShadows = false;\n    if (Platform.OS === 'android') {\n      delete resolvedStyle.shadowColor;\n      delete resolvedStyle.shadowOffset;\n      delete resolvedStyle.shadowOpacity;\n      delete resolvedStyle.shadowRadius;\n      hasShadows = !!resolvedStyle.elevation;\n    } else {\n      delete resolvedStyle.elevation;\n      hasShadows = !!resolvedStyle.shadowColor;\n    }\n\n    // @ts-ignore\n    const backgroundColor = processColor(resolvedStyle.backgroundColor);\n    // On Android, we have to set the `backgroundColor` directly on the correct component.\n    // So we have to remove it from styles. Otherwise, the background color won't take into consideration the border-radius.\n    if (Platform.OS === 'android') {\n      delete resolvedStyle.backgroundColor;\n    }\n\n    // Shadows are rendered quite differently on iOS, Android and web.\n    // - iOS renders the shadow along the transparent contours of the image.\n    // - Android renders an underlay which extends to the inside of the bounds.\n    // - Web renders the shadow only on the outside of the bounds.\n    // To achieve a consistent appearance on all platforms, it is highly recommended\n    // to set a background-color on the Image when using shadows. This will ensure\n    // consistent rendering on all platforms and mitigate Androids drawing artefacts.\n    if (hasShadows) {\n      const bkColor: number = typeof backgroundColor === 'number' ? backgroundColor : 0;\n      const alpha = bkColor >> 24;\n      if (alpha !== -1 && alpha !== 255) {\n        // To silence this warning, set background-color to a fully transparent color\n        console.warn(\n          `\"expo-image\" Shadows may not be rendered correctly for the transparent parts of images. Set \"backgroundColor\" to a non-transparent color when using a shadow.`\n        );\n      }\n    }\n\n    const tintColor = processColor(resolvedStyle.tintColor);\n\n    const borderColor = processColor(resolvedStyle.borderColor);\n    // @ts-ignore\n    const borderStartColor = processColor(resolvedStyle.borderStartColor);\n    // @ts-ignore\n    const borderEndColor = processColor(resolvedStyle.borderEndColor);\n    // @ts-ignore\n    const borderLeftColor = processColor(resolvedStyle.borderLeftColor);\n    // @ts-ignore\n    const borderRightColor = processColor(resolvedStyle.borderRightColor);\n    // @ts-ignore\n    const borderTopColor = processColor(resolvedStyle.borderTopColor);\n    // @ts-ignore\n    const borderBottomColor = processColor(resolvedStyle.borderBottomColor);\n\n    return (\n      <NativeExpoImage\n        {...props}\n        {...resolvedStyle}\n        source={resolvedSource}\n        style={resolvedStyle}\n        defaultSource={resolvedPlaceholder}\n        contentFit={contentFit}\n        contentPosition={contentPosition}\n        onLoadStart={this.onLoadStart}\n        onLoad={this.onLoad}\n        onProgress={this.onProgress}\n        onError={this.onError}\n        // @ts-ignore\n        tintColor={tintColor}\n        borderColor={borderColor}\n        borderLeftColor={borderLeftColor}\n        borderRightColor={borderRightColor}\n        borderTopColor={borderTopColor}\n        borderBottomColor={borderBottomColor}\n        borderStartColor={borderStartColor}\n        borderEndColor={borderEndColor}\n        backgroundColor={backgroundColor}\n      />\n    );\n  }\n}\n\nexport { ExpoImageModule };\nexport default ExpoImage;\n"]}